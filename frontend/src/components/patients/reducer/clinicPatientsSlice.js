import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { getClinicsData, getPatientsData } from '../../../resources/api';

const initialState = {
  status: 'idle',
  clinics: [],
  patients: [],
  isError: false,
  error: '',
};


export const getClinics = createAsyncThunk(
  'clinic/get',
  async (_ ,{dispatch}) => {
    const result = await getClinicsData();
    dispatch(setClinicData(result));
  }
);

export const getPatients = createAsyncThunk(
  'patients/get',
  async (clinicId ,{dispatch}) => {
    const result = await getPatientsData(clinicId);
    dispatch(setPatientsData(result));
  }
);

export const clinicPatientsSlice = createSlice({
  name: 'clinic',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    setClinicData: (state, action) => {
      state.clinics = action.payload.clinics;
    },
    setPatientsData: (state, action) => {
      state.patients = action.payload.patients;
    },
  },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getClinics.pending, (state) => {
        state.status = 'loading';
        state.isError = false;
      })
      .addCase(getClinics.fulfilled, (state, action) => {
        state.status = 'idle';
        state.words = action.payload;
      })
      .addCase(getClinics.rejected, (state, action) => {
        state.status = 'error';
        state.isError = true;
        state.error = action.error.message;
      })
      .addCase(getPatients.pending, (state) => {
        state.status = 'loading';
        state.isError = false;
      })
      .addCase(getPatients.fulfilled, (state, action) => {
        state.status = 'idle';
        state.words = action.payload;
      })
      .addCase(getPatients.rejected, (state, action) => {
        state.status = 'error';
        state.isError = true;
        state.error = action.error.message;
      });
  },

});

export const {  setClinicData, setPatientsData } = clinicPatientsSlice.actions;

export const selectClinics = (state) => state.clinic.clinics;
//this selector should be memoized
export const selectClinicOptions = (state) => state.clinic.clinics.map(item => ({value: item.id, label: item.name}));
export const selectPatients = (state) => state.clinic.patients;
export const selectIsError = (state) => state.clinic.isError;
export const selectErrorMsg = (state) => state.clinic.error;

export default clinicPatientsSlice.reducer;
